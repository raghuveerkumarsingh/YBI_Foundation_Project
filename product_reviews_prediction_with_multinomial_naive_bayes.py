# -*- coding: utf-8 -*-
"""Product Reviews Prediction with Multinomial Naive Bayes

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EPU7vpE9JDKagziPLrPhT7CM5kTCSqyV

**Women Cloth Reviews Prediction with Multi Nomial Naive Bayes**

The multinomial Naive Bayes classifier is suitable for classification with discrete features (e.g., word counts for text classification).The multinomial distribution normally requires integer feature counts.However,in practice, fractional counts such as tf-idf may also work.

**Import Library**
"""

import pandas as pd

import numpy as np

import matplotlib.pyplot as plt

import seaborn as sns

"""**Import Dataset**"""

df = pd.read_csv('https://raw.githubusercontent.com/YBI-Foundation/Teaching-Data/main/Women%20Clothing%20E-Commerce%20Review.csv')

df.head()

df.info()

df.shape

"""**Missing Values**

Remove missing values in Reviews columns with No Review text
"""

df.isna().sum()

df[df['Review']==""]=np.NaN

df['Review'].fillna("NO Review",inplace=True)

df.isna().sum()

df['Review']

"""**Define Target (y) and Feature (X)**"""

df.columns

x = df['Review']

y = df['Rating']

df['Rating'].value_counts()

"""**Train Test Split**"""

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test =train_test_split(x,y,test_size=0.7,stratify=y,random_state=2529)

x_train.shape,x_test.shape,y_train.shape,y_test.shape

"""**Get Feature Text Conversion to Tokens**"""

from sklearn.feature_extraction.text import CountVectorizer

cv=CountVectorizer(lowercase=True,analyzer='word',ngram_range=(2,3),stop_words='english',max_features=5000)

x_train=cv.fit_transform(x_train)

cv.get_feature_names_out()

x_train.toarray()

x_test=cv.fit_transform(x_test)

cv.get_feature_names_out()

x_test.toarray()

"""**Get Model Train**"""

from sklearn.naive_bayes import MultinomialNB

model=MultinomialNB()

model.fit(x_train,y_train)

"""**Get Model Prediction**"""

y_pred=model.predict(x_test)

y_pred.shape

y_pred

"""**Get Probability of Each Predicted Class**"""

model.predict_proba(x_test)

"""**Get Model Evaluation**"""

from sklearn.metrics import confusion_matrix,classification_report

print(confusion_matrix(y_test,y_pred))

print(classification_report(y_test,y_pred))

"""**Recategories Ratings as Poor (0) and Good (1)**"""

df['Rating'].value_counts()

"""Re-Rating as 1,2,3 as 0 and 4,5 as 1"""

df.replace({'Rating':{1:0,2:0,3:0,4:1,5:1}}, inplace=True)

y=df['Rating']

x=df['Review']

"""**Train Test Split**"""

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test =train_test_split(x,y, train_size=0.7,stratify=y,random_state=2529)

x_train.shape,x_test.shape,y_train.shape,y_test.shape

"""**Get Feature Text Conversion to Tokens**"""

from sklearn.feature_extraction.text import CountVectorizer

cv=CountVectorizer(lowercase=True,analyzer='word',ngram_range=(2,3),stop_words='english',max_features=5000)

x_train=cv.fit_transform(x_train)

x_test=cv.fit_transform(x_test)

"""**Get Model Re-Train**"""

from sklearn.naive_bayes import MultinomialNB

model=MultinomialNB()

model.fit(x_train,y_train)

"""**Get Model Prediction**"""

y_pred=model.predict(x_test)

y_pred.shape

y_pred

"""**Get Model Evaluation**"""

from sklearn.metrics import confusion_matrix,classification_report

print(confusion_matrix(y_test,y_pred))

print(classification_report(y_test,y_pred))